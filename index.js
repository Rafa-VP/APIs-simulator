const apiUrl = "http://localhost:3001/integrantes" // NUESTRA URL DE LA API

// FUNCIÓN ASÍNCRONA
// PUEDE IGUALMENTE DECLARARSE DE LA SIGUIENTE FORMA SI LES PARECE CÓMODO --> async funciton getAllIntegrantes(){ ... }
// UNA FUNCIÓN ASÍNCRONA RETORNA UNA PROMESA

// EJM: LE DICES A TU COMPAÑERO QUE TE COMPRE UN CAFÉ EN LA MÁQUINA
// TU COMPAÑERO ES LA FUNCIÓN, SIN EMBARGO, EL QUE TE CUMPLA ESA PROMESA DE QUE TE VA A COMPRAR EL CAFÉ DEPENDE DEL TRANSCURSO
// DONDE TU COMPAÑERO DEBE IR A LA MÁQUINA, COMPRAR, VOLVER, ETC...
// ESO SIGNIFICA QUE LO QUE LE PIDES NO SE PUEDE REALIZAR AL INSTANTE, POR ENDE, ES ASÍNCRONO, DEBES ESPERARLO
const getAllIntegrantes = async () => {
  // await ES COMO DECIRLE A NUESTRA FUNCIÓN ASÍNCRONA, LO QUE DEBE ESPERAR PARA QUE LA FUNCIÓN SE CUMPLA
  const respuesta = await fetch(apiUrl, { method: "GET" }) // FETCH ES UNA FUNCIÓN QUE VIENE EN NUESTRO LENGUAJE PARA LLAMAR A LA API, YA SEA PARA GET, POST, PUT, ETC...
  return respuesta
}

// CUANDO LLAMAMOS A UNA FUNCIÓN ASÍNCRONA, POR DEFECTO ESTA NOS TRAE LOS MÉTODOS:
// .then(data => {...}) --> EN CASO DE QUE TODO VAYA BIEN
// .catch(error => {...}) --> EN CASO DE QUE ALGO SALIÓ MAL
// .finally(() => {...}) --> CUANDO LA FUNCIÓN YA HIZO SU TRABAJO, SIN IMPORTAR SI SALIÓ BIEN O MAL...
getAllIntegrantes() // LLAMA A LA FUNCIÓN
  .then((respuesta) => respuesta.json() // LLAMAMOS AL MÉTODO .json() PARA DARLE FORMATO JSON A NUESTRA RESPUESTA
  .then((respuesta) => console.log("\n\nRESPUESTA: ", respuesta)) // LUEGO QUE SE CONVIERTA EN UN FORMATO JSON, LO MOSTRAMOS EN LA CONSOLA
  ) 
// \n ES UN SALTO DE LÍNEA
